---
import Layout from '~/layouts/Layout.astro'
import Project from '~/components/Repo.astro'

interface Project {
  name: string
  owner?: string
}

const categorizedProjects: Record<string, Project[]> = {
  'Tempaltes': [
    { name: 'starter-vue' },
    { name: 'starter-monorepo' },
    { name: 'vue-hbs-admin', owner: 'developer-plus' },
  ],
  'Sites': [
    { name: 'awesome-git-commit-messages' },
  ],
  'VS Code Extensions': [
    { name: 'code-snippets' },
  ],
  'Raycast Extensions': [
    { name: 'code-variable' },
    { name: 'translate' },
  ],
}

const fetchRepoInfo = async (repo: Project): Promise<any> => {
  const { name, owner = 'Hongbusi' } = repo
  const response = await fetch(`https://api.github.com/repos/${owner}/${name}`)
  return response.json()
}

const getCategorizedRepos = async (): Promise<Record<string, any[]>> => {
  const categorizedRepos: Record<string, any[]> = {}

  await Promise.all(
    Object.entries(categorizedProjects).map(async ([category, repos]) => {
      const results = await Promise.all(repos.map(fetchRepoInfo))
      categorizedRepos[category] = results
    })
  )

  return categorizedRepos
}

const categorizedRepos = await getCategorizedRepos()
---

<Layout title="Projects" description="List of projects that I am proud of.">
  {Object.entries(categorizedRepos).map(([category, repos]) => (
    <div>
      <h3 class="opacity-75">{category}</h3>
      <div class="grid grid-cols-1 md:grid-cols-2 grid-gap-4">
        {repos.map(repo => (<Project repo={repo} />))}
      </div>
    </div>
  ))}
</Layout>
